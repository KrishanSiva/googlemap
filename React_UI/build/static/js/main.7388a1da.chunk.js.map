{"version":3,"sources":["mapStyles.js","App.js","serviceWorker.js","index.js"],"names":["mapStyles","featureType","elementType","stylers","color","lightness","visibility","weight","MapWrapped","withScriptjs","withGoogleMap","_useState","useState","_useState2","Object","slicedToArray","selectedPark","setSelectedPark","useEffect","listener","e","key","window","addEventListener","removeEventListener","react_default","a","createElement","lib","defaultZoom","defaultCenter","lat","lng","defaultOptions","styles","parkData","map","park","properties","PARK_ID","position","geometry","coordinates","onClick","icon","url","scaledSize","google","maps","Size","onCloseClick","NAME","DESCRIPTIO","App","style","width","height","googleMapURL","concat","process","REACT_APP_GOOGLE_KEY","loadingElement","containerElement","mapElement","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7388a1da.chunk.js","sourcesContent":["export default [\n  {\n    featureType: \"water\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#004358\"\n      }\n    ]\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#1f8a70\"\n      }\n    ]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#1f8a70\"\n      }\n    ]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#fd7400\"\n      }\n    ]\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#1f8a70\"\n      },\n      {\n        lightness: -20\n      }\n    ]\n  },\n  {\n    featureType: \"road.local\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#1f8a70\"\n      },\n      {\n        lightness: -17\n      }\n    ]\n  },\n  {\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        color: \"#ffffff\"\n      },\n      {\n        visibility: \"on\"\n      },\n      {\n        weight: 0.9\n      }\n    ]\n  },\n  {\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        visibility: \"on\"\n      },\n      {\n        color: \"#ffffff\"\n      }\n    ]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"labels\",\n    stylers: [\n      {\n        visibility: \"simplified\"\n      }\n    ]\n  },\n  {\n    elementType: \"labels.icon\",\n    stylers: [\n      {\n        visibility: \"off\"\n      }\n    ]\n  },\n  {\n    featureType: \"transit\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#1f8a70\"\n      },\n      {\n        lightness: -10\n      }\n    ]\n  },\n  {},\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#1f8a70\"\n      },\n      {\n        weight: 0.7\n      }\n    ]\n  }\n];\n","import React, { useState, useEffect } from \"react\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  Marker,\n  InfoWindow\n} from \"react-google-maps\";\nimport * as parkData from \"./data/skateboard-parks.json\";\nimport mapStyles from \"./mapStyles\";\n\nfunction Map() {\n  const [selectedPark, setSelectedPark] = useState(null);\n\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n    window.addEventListener(\"keydown\", listener);\n\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n  return (\n    <GoogleMap\n      defaultZoom={10}\n      defaultCenter={{ lat: 9.731588, lng:80.020643}}\n      defaultOptions={{ styles: mapStyles }}\n    >\n      {parkData.features.map(park => (\n        <Marker\n          key={park.properties.PARK_ID}\n          position={{\n            lat: park.geometry.coordinates[1],\n            lng: park.geometry.coordinates[0]\n          }}\n          onClick={() => {\n            setSelectedPark(park);\n          }}\n          icon={{\n            url: `/skateboarding.svg`,\n            scaledSize: new window.google.maps.Size(25, 25)\n          }}\n        />\n      ))}\n\n      {selectedPark && (\n        <InfoWindow\n          onCloseClick={() => {\n            setSelectedPark(null);\n          }}\n          position={{\n            lat: selectedPark.geometry.coordinates[1],\n            lng: selectedPark.geometry.coordinates[0]\n          }}\n        >\n          <div>\n            <h2>{selectedPark.properties.NAME}</h2>\n            <p>{selectedPark.properties.DESCRIPTIO}</p>\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n}\n\nconst MapWrapped = withScriptjs(withGoogleMap(Map));\n\nexport default function App() {\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <MapWrapped\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${\n          process.env.REACT_APP_GOOGLE_KEY\n        }`}\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `100%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}